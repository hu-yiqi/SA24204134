# Perform quick sort and display the animation
sorted_vec <- quick_sort_with_gif(vec)
# Print the sorted vector
print(sorted_vec)
# Calculate the 10th Fibonacci number
fib_10 <- fibonacci_cpp(10)
# Calculate the 10th Fibonacci number
# Load the package
library(SA24204134)
fib_10 <- fibonacci_cpp(10)
Rcpp::compileAttributes()
devtools::document()
devtools::document()
# Calculate the 10th Fibonacci number
# Load the package
library(SA24204134)
fib_10 <- fibonacci_cpp(10)
# Calculate the 10th Fibonacci number
# Load the package
library(SA24204134)
fib_10 <- fibonacci_cpp(10)
# Calculate the 10th Fibonacci number
# Load the package
library(SA24204134)
fib_10 <- fibonacci_cpp(10)
devtools::document()
devtools::document()
devtools::install(build_vignettes = TRUE)
Rcpp::compileAttributes()
Rcpp::compileAttributes()
devtools::document()
Rcpp::compileAttributes()
devtools::document()
# Calculate the 10th Fibonacci number
# Load the package
library(SA24204134)
fib_10 <- fibonacci_cpp(10)
# Print the result
print(fib_10)
# Calculate the 10th Fibonacci number
# Load the package
library(SA24204134)
fib <- fibonacci_cpp(1e10)
# Calculate the 10th Fibonacci number
# Load the package
library(SA24204134)
fib <- fibonacci_cpp(1e5)
# Print the result
print(fib)
# Load the package
library(SA24204134)
# Generate a random vector
vec <- sample(1:20)
# Perform quick sort and display the animation
quick_sort_with_gif(vec)
# Calculate the 10th Fibonacci number
# Load the package
library(SA24204134)
fib <- fibonacci_cpp(1e5)
# Print the result
print(fib)
# Load the package
library(SA24204134)
# Define the R version of the Fibonacci function
fibonacci_r <- function(n) {
if (n <= 1) return(n)
return(fibonacci_r(n - 1) + fibonacci_r(n - 2))
}
# Define the number for comparison
n <- 30  # Choose a relatively large value for a meaningful comparison
# Compare the speeds
library(microbenchmark)
benchmark_results <- microbenchmark(
fibonacci_cpp = fibonacci_cpp(n),
fibonacci_r = fibonacci_r(n),
times = 10  # Run each function 10 times
)
print(benchmark_results)
# Plot the results
library(ggplot2)
autoplot(benchmark_results)
# Load the package
library(SA24204134)
# Define the R version of the Fibonacci function
fibonacci_r <- function(n) {
if (n <= 1) return(n)
return(fibonacci_r(n - 1) + fibonacci_r(n - 2))
}
# Define the number for comparison
n <- 1000  # Choose a relatively large value for a meaningful comparison
# Compare the speeds
library(microbenchmark)
benchmark_results <- microbenchmark(
fibonacci_cpp = fibonacci_cpp(n),
fibonacci_r = fibonacci_r(n),
times = 1000  # Run each function 10 times
)
# Load the package
library(SA24204134)
# Define the R version of the Fibonacci function
fibonacci_r <- function(n) {
if (n <= 1) return(n)
return(fibonacci_r(n - 1) + fibonacci_r(n - 2))
}
# Define the number for comparison
n <- 1000  # Choose a relatively large value for a meaningful comparison
# Compare the speeds
library(microbenchmark)
benchmark_results <- microbenchmark(
fibonacci_cpp = fibonacci_cpp(n),
fibonacci_r = fibonacci_r(n),
times = 100  # Run each function 1000 times
)
# Load the package
library(SA24204134)
# Define the R version of the Fibonacci function
fibonacci_r <- function(n) {
if (n <= 1) return(n)
return(fibonacci_r(n - 1) + fibonacci_r(n - 2))
}
# Define the number for comparison
n <- 1000  # Choose a relatively large value for a meaningful comparison
# Compare the speeds
library(microbenchmark)
benchmark_results <- microbenchmark(
fibonacci_cpp = fibonacci_cpp(n),
fibonacci_r = fibonacci_r(n),
times = 10  # Run each function 10 times
)
print(benchmark_results)
# Plot the results
library(ggplot2)
autoplot(benchmark_results)
# Load the package
library(SA24204134)
# Define the R version of the Fibonacci function
fibonacci_r <- function(n) {
if (n <= 1) return(n)
return(fibonacci_r(n - 1) + fibonacci_r(n - 2))
}
# Define the number for comparison
n <- 100  # Choose a relatively large value for a meaningful comparison
# Compare the speeds
library(microbenchmark)
benchmark_results <- microbenchmark(
fibonacci_cpp = fibonacci_cpp(n),
fibonacci_r = fibonacci_r(n),
times = 10  # Run each function 10 times
)
# Load the package
library(SA24204134)
# Generate a dataset and fit Lasso model
result <- generate_lasso_regression(n_samples = 100, n_features = 50, noise_level = 1)
# Load the package
library(SA24204134)
# Define the R version of the Fibonacci function
fibonacci_r <- function(n) {
if (n <= 1) return(n)
return(fibonacci_r(n - 1) + fibonacci_r(n - 2))
}
# Define the number for comparison
n <- 100  # Choose a relatively large value for a meaningful comparison
# Compare the speeds
library(microbenchmark)
benchmark_results <- microbenchmark(
fibonacci_cpp = fibonacci_cpp(n),
fibonacci_r = fibonacci_r(n),
times = 10  # Run each function 10 times
)
# Load the package
library(SA24204134)
# Define the R version of the Fibonacci function
fibonacci_r <- function(n) {
if (n <= 1) return(n)
return(fibonacci_r(n - 1) + fibonacci_r(n - 2))
}
# Define the number for comparison
n <- 50  # Choose a relatively large value for a meaningful comparison
# Compare the speeds
library(microbenchmark)
benchmark_results <- microbenchmark(
fibonacci_cpp = fibonacci_cpp(n),
fibonacci_r = fibonacci_r(n),
times = 10  # Run each function 10 times
)
Rcpp::compileAttributes()
devtools::document()
Rcpp::compileAttributes()
devtools::document()
devtools::document()
devtools::check()
devtools::check()
# Load the package
library(SA24204134)
# Define the R version of the Fibonacci function
fibonacci_r <- function(n) {
if (n <= 1) return(n)
return(fibonacci_r(n - 1) + fibonacci_r(n - 2))
}
# Define the number for comparison
n <- 50  # Choose a relatively large value for a meaningful comparison
# Compare the speeds
library(microbenchmark)
benchmark_results <- microbenchmark(
fibonacci_cpp = fibonacci_cpp(n),
fibonacci_r = fibonacci_r(n),
times = 10  # Run each function 10 times
)
# Load the package
library(SA24204134)
# Define the R version of the Fibonacci function
fibonacci_r <- function(n) {
if (n <= 1) return(n)
return(fibonacci_r(n - 1) + fibonacci_r(n - 2))
}
# Define the number for comparison
n <- 50  # Choose a relatively large value for a meaningful comparison
fibonacci_cpp = fibonacci_cpp(n)
# Load the package
library(SA24204134)
# Define the R version of the Fibonacci function
fibonacci_r <- function(n) {
if (n <= 1) return(n)
return(fibonacci_r(n - 1) + fibonacci_r(n - 2))
}
# Define the number for comparison
n <- 50  # Choose a relatively large value for a meaningful comparison
fibonacci_cpp = fibonacci_cpp(n)
fibonacci_cpp
# Load the package
library(SA24204134)
# Define the R version of the Fibonacci function
fibonacci_r <- function(n) {
if (n <= 1) return(n)
return(fibonacci_r(n - 1) + fibonacci_r(n - 2))
}
# Define the number for comparison
n <- 40  # Choose a relatively large value for a meaningful comparison
fibonacci_cpp = fibonacci_cpp(n)
fibonacci_cpp
# Load the package
library(SA24204134)
# Define the R version of the Fibonacci function
fibonacci_r <- function(n) {
if (n <= 1) return(n)
return(fibonacci_r(n - 1) + fibonacci_r(n - 2))
}
# Define the number for comparison
n <- 50  # Choose a relatively large value for a meaningful comparison
fibonacci_cpp = fibonacci_cpp(n)
fibonacci_cpp
# Load the package
library(SA24204134)
# Define the R version of the Fibonacci function
fibonacci_r <- function(n) {
if (n <= 1) return(n)
return(fibonacci_r(n - 1) + fibonacci_r(n - 2))
}
# Define the number for comparison
n <- 60  # Choose a relatively large value for a meaningful comparison
fibonacci_cpp = fibonacci_cpp(n)
fibonacci_cpp
# Load the package
library(SA24204134)
# Define the R version of the Fibonacci function
fibonacci_r <- function(n) {
if (n <= 1) return(n)
return(fibonacci_r(n - 1) + fibonacci_r(n - 2))
}
# Define the number for comparison
n <- 100  # Choose a relatively large value for a meaningful comparison
fibonacci_cpp = fibonacci_cpp(n)
fibonacci_cpp
# Load the package
library(SA24204134)
# Define the R version of the Fibonacci function
fibonacci_r <- function(n) {
if (n <= 1) return(n)
return(fibonacci_r(n - 1) + fibonacci_r(n - 2))
}
# Define the number for comparison
n <- 50  # Choose a relatively large value for a meaningful comparison
fibonacci_cpp = fibonacci_cpp(n)
fibonacci_cpp
# Load the package
library(SA24204134)
# Define the R version of the Fibonacci function
fibonacci_r <- function(n) {
if (n <= 1) return(n)
return(fibonacci_r(n - 1) + fibonacci_r(n - 2))
}
# Define the number for comparison
n <- 50  # Choose a relatively large value for a meaningful comparison
fibonacci_cpp = fibonacci_cpp(n)
fibonacci_cpp
# Load the package
library(SA24204134)
# Define the R version of the Fibonacci function
fibonacci_r <- function(n) {
if (n <= 1) return(n)
return(fibonacci_r(n - 1) + fibonacci_r(n - 2))
}
# Define the number for comparison
n <- 50  # Choose a relatively large value for a meaningful comparison
fibonacci_cpp = fibonacci_cpp(n)
fibonacci_cpp
# Load the package
library(SA24204134)
# Define the R version of the Fibonacci function
fibonacci_r <- function(n) {
if (n <= 1) return(n)
return(fibonacci_r(n - 1) + fibonacci_r(n - 2))
}
# Define the number for comparison
n <- 100  # Choose a relatively large value for a meaningful comparison
fibonacci_cpp = fibonacci_cpp(n)
fibonacci_cpp
# Load the package
library(SA24204134)
n <- 100  # Choose a relatively large value for a meaningful comparison
fibonacci_cpp = fibonacci_cpp(n)
fibonacci_cpp
# Load the package
library(SA24204134)
n <- 100  # Choose a relatively large value for a meaningful comparison
fibonacci_cpp = fibonacci_cpp(n)
fibonacci_cpp
# Load the package
library(SA24204134)
n <- 100  # Choose a relatively large value for a meaningful comparison
fibonacci_cpp = fibonacci_cpp(n)
fibonacci_cpp
# Load the package
library(SA24204134)
n <- 1000  # Choose a relatively large value for a meaningful comparison
fibonacci_cpp = fibonacci_cpp(n)
fibonacci_cpp
# Load the package
library(SA24204134)
# Generate a dataset and fit Lasso model
result <- generate_lasso_regression(n_samples = 100, n_features = 50, noise_level = 1)
# Display optimal lambda
cat("Optimal lambda:", result$optimal_lambda, "\n")
# Plot cross-validation results
plot(result$lasso_model)
# Extract and display the non-zero coefficients
coef_nonzero <- coef(result$lasso_model, s = "lambda.min")
cat("Non-zero coefficients:\n")
print(coef_nonzero)
devtools::document()
devtools::build_vignettes()
devtools::check()
install.packages(c("DAAG", "boot", "bootstrap", "coda", "cramer", "lpSolve", "microbenchmark"))
devtools::build_vignettes()
devtools::document()
devtools::check()
Rcpp::compileAttributes()
devtools::document()
devtools::document()
library(SA24204134)
# Create a random matrix
mat <- matrix(rnorm(100), nrow = 10, ncol = 10)
# Apply sparse matrix thresholding
sparse_mat <- sparse_matrix_threshold_cpp(mat, 0.5)
# Print the sparse matrix
print(sparse_mat)
# Verify that all values below the threshold are zero
all(abs(sparse_mat[abs(mat) < 0.5]) == 0)
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::check()
# Load the package
library(SA24204134)
n <- 1000  # Choose a relatively large value for a meaningful comparison
fibonacci_cpp = fibonacci_cpp(n)
fibonacci_cpp
# Load the package
library(SA24204134)
# Generate a dataset and fit Lasso model
result <- generate_lasso_regression(n_samples = 100, n_features = 50, noise_level = 1)
library(SA24204134)
# Create a random matrix
mat <- matrix(rnorm(100), nrow = 10, ncol = 10)
# Apply sparse matrix thresholding
sparse_mat <- sparse_matrix_threshold_cpp(mat, 0.5)
# Print the sparse matrix
print(sparse_mat)
# Verify that all values below the threshold are zero
all(abs(sparse_mat[abs(mat) < 0.5]) == 0)
# Load the package
library(SA24204134)
# Generate a dataset and fit Lasso model
result <- generate_lasso_regression(n_samples = 100, n_features = 50, noise_level = 1)
# Load the package
library(SA24204134)
# Generate dataset and fit Lasso model
result <- generate_lasso_regression(n_samples = 100, n_features = 50, noise_level = 1)
devtools::document()
# Load the package
library(SA24204134)
# Generate dataset and fit Lasso model
result <- generate_lasso_regression(n_samples = 100, n_features = 50, noise_level = 1)
# Display optimal lambda
cat("Optimal lambda:", result$optimal_lambda, "\n")
# Plot Lasso path
print(result$lasso_path_plot)
# Plot Cross-validation error
print(result$cv_error_plot)
library(SA24204134)
# Create a random matrix
mat <- matrix(rnorm(100), nrow = 10, ncol = 10)
# Apply sparse matrix thresholding
sparse_mat <- sparse_matrix_threshold_cpp(mat, 0.5)
# Print the sparse matrix
print(sparse_mat)
# Verify that all values below the threshold are zero
all(abs(sparse_mat[abs(mat) < 0.5]) == 0)
Rcpp::compileAttributes()
devtools::document()
Rcpp::compileAttributes()
devtools::document()
Rcpp::compileAttributes()
devtools::document()
# Load the package
library(SA24204134)
n <- 1000  # Choose a relatively large value for a meaningful comparison
fibonacci_cpp = fibonacci_cpp(n)
fibonacci_cpp
# Load the package
library(SA24204134)
n <- 50  # Choose a relatively large value for a meaningful comparison
fibonacci_cpp = fibonacci_cpp(n)
fibonacci_cpp
# Load the package
library(SA24204134)
n <- 20  # Choose a relatively large value for a meaningful comparison
fibonacci_cpp = fibonacci_cpp(n)
fibonacci_cpp
# Load the package
library(SA24204134)
# Generate dataset and fit Lasso model
result <- generate_lasso_regression(n_samples = 100, n_features = 50, noise_level = 1)
# Display optimal lambda
cat("Optimal lambda:", result$optimal_lambda, "\n")
# Plot Lasso path
print(result$lasso_path_plot)
# Plot Cross-validation error
print(result$cv_error_plot)
library(SA24204134)
# Create a random matrix
mat <- matrix(rnorm(100), nrow = 10, ncol = 10)
# Apply sparse matrix thresholding
sparse_mat <- sparse_matrix_threshold_cpp(mat, 0.5)
# Print the sparse matrix
print(sparse_mat)
# Verify that all values below the threshold are zero
all(abs(sparse_mat[abs(mat) < 0.5]) == 0)
devtools::check()
devtools::document()
devtools::document()
Rcpp::compileAttributes()
devtools::document()
Rcpp::compileAttributes()
devtools::document()
Rcpp::compileAttributes()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
Rcpp::compileAttributes()
devtools::document()
Rcpp::compileAttributes()
Rcpp::compileAttributes()
Rcpp::compileAttributes()
devtools::document()
Rcpp::compileAttributes()
devtools::document()
Rcpp::compileAttributes()
devtools::document()
Rcpp::compileAttributes()
devtools::document()
devtools::document()
devtools::document()
Rcpp::compileAttributes()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::check_built()
devtools::check()
devtools::check()
devtools::check()
getwd()
devtools::check()
getwd()
devtools::install_github("hu-yiqi/SA24204134")
devtools::document()
devtools::build_vignettes()
devtools::install_github("hu-yiqi/SA24204134")
devtools::install_github("hu-yiqi/SA24204134", force = TRUE)
devtools::install_github("SA24204134", build_vignettes = TRU)
devtools::install_github("SA24204134", build_vignettes = TRUE)
devtools::install_github("SA24204134", build_vignettes = TRUE)
devtools::install_github("SA24204134", build_vignettes = TRUE)
devtools::install_github("SA24204134", build_vignettes = TRUE)
